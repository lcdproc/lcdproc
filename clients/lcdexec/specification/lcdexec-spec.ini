; using /_/ is not possible with current spec setup

[]
mountpoint = lcdexec.conf
infos/plugins = ni type range reference network ; path

[lcdexec/address]
check/ipaddr =
type = string
check/type = string
default = 127.0.0.1
description = Address of the LCDd server
opt = a
opt/long = address

[lcdexec/port]
check/port =
type = unsigned_short
check/type = unsigned_short
default = 13666
description = Port to attach to LCDd server
opt = p
opt/long = port

[lcdexec/reportlevel]
type = unsigned_short
check/type = unsigned_short
check/range = 0-5
default = 2
description = Sets the reporting level, defaults to warnings and errors only.
opt = r
opt/long = report-level

[lcdexec/reporttosyslog]
type = boolean
check/type = boolean
default = 0 ; TODO (elektra): default values conversion
description = Should we report to syslog instead of stderr?
opt = s
opt/long = report-to-syslog

[lcdexec/foreground]
type = boolean
check/type = boolean
default = 0 ; TODO (elektra): default values conversion
description = "whether to run in foreground"
opt = f
opt/long = foreground
opt/arg = none

[lcdexec/pidfile]
type = string
check/type = string
;check/path = ; TODO (elektra): too many plugins, does not have to exist
default = /var/run/lcdexec.pid
description = "PidFile location when running as daemon"

[lcdexec/shell]
type = string
check/type = string
;check/path = ; TODO (elektra): too many plugins
default = /bin/sh
description = "shell to use for executing programs; any shell that understands: -c COMMAND"
env = SHELL

[lcdexec/displayname]
type = string
check/type = string
default = lcdexec
description = "display name for the main menu"

[menu/main]
type = struct_ref
check/type = any
require =
check/reference = single
check/reference/restrict = ../menu/#
description = "reference to the main menu"

[menu/menu/#]
type = struct
check/type = any
default = ""
gen/struct/type = Menu
gen/struct/alloc = 1
gen/struct/create = 0

[menu/menu/#/type]
type = discriminator
check/type = enum
check/enum = #1
check/enum/#0 = command
check/enum/#1 = menu
default = menu ; TODO (elektra): should be constant
gen/enum/type = MenuEntryType
gen/enum/create = 0

[menu/menu/#/displayname]
type = string
check/type = string
require = 
description = "name to display in the parent menu"

[menu/menu/#/entries]
check/reference = recursive
check/reference/restrict = #1
check/reference/restrict/#0 = ../../../command/#
check/reference/restrict/#1 = ../../../menu/#
description = "array of references to entries (commands or sub-menus) in this menu"

[menu/menu/#/entries/#]
type = struct_ref
check/type = any
default = ""
gen/reference/discriminator = entryTypes
gen/reference/discriminator/key = type
gen/reference/discriminator/enum = MenuEntryType
gen/reference/discriminator/union = MenuEntry
gen/reference/restrict/#0/discriminator = command
gen/reference/restrict/#1/discriminator = menu
gen/union/create = 0

[menu/command/#]
type = struct
check/type = any
default = ""
gen/struct/type = Command
gen/struct/alloc = 1
gen/struct/create = 0

[menu/command/#/type]
type = discriminator
check/type = enum
check/enum = #1
check/enum/#0 = command
check/enum/#1 = menu
default = command ; TODO (elektra): should be constant
gen/enum/type = MenuEntryType
gen/enum/create = 0

[menu/command/#/entries]
check/reference/restrict =

[menu/command/#/parameters]
check/reference = single
check/reference/restrict = #5
check/reference/restrict/#0 = ../../../parameter/slider/#
check/reference/restrict/#1 = ../../../parameter/checkbox/#
check/reference/restrict/#2 = ../../../parameter/numeric/#
check/reference/restrict/#3 = ../../../parameter/ring/#
check/reference/restrict/#4 = ../../../parameter/alpha/#
check/reference/restrict/#5 = ../../../parameter/ip/#

[menu/command/#/parameters/#]
type = struct_ref
check/type = any
default = ""
gen/reference/discriminator = parameterTypes
gen/reference/discriminator/key = type
gen/reference/discriminator/enum = CommandParameterType
gen/reference/discriminator/union = CommandParameter
gen/reference/restrict/#0/discriminator = slider
gen/reference/restrict/#1/discriminator = checkbox
gen/reference/restrict/#2/discriminator = numeric
gen/reference/restrict/#3/discriminator = ring
gen/reference/restrict/#4/discriminator = alpha
gen/reference/restrict/#5/discriminator = ip
gen/union/create = 0

[menu/command/#/displayname]
type = string
check/type = string
default = ""
description = "name to display in the menu"

[menu/command/#/exec]
type = string
check/type = string
require = 
description = "what the command should do"

[menu/command/#/feedback]
type = boolean
check/type = boolean
default = 0 ; TODO (elektra): default values conversion
description = "show a temporary feedback screen upon completion"

[menu/parameter/slider/#]
type = struct
check/type = any
default = ""
gen/struct/type = SliderParameter
gen/struct/alloc = 1
gen/struct/create = 0

[menu/parameter/slider/#/type]
type = discriminator
check/type = enum
check/enum = #5
check/enum/#0 = slider
check/enum/#1 = checkbox
check/enum/#2 = numeric
check/enum/#3 = ring
check/enum/#4 = alpha
check/enum/#5 = ip
default = slider ; TODO (elektra): should be constant
gen/enum/type = CommandParameterType
gen/enum/create = 0

[menu/parameter/slider/#/displayname]
type = string
check/type = string
default = ""
description = "name to display in the command"

[menu/parameter/slider/#/envname]
type = string
check/type = string
require =
description = "name of the environment variable used by the parameter"

[menu/parameter/slider/#/value]
type = long
check/type = long
default = 0
description = "initial value of the argument"

[menu/parameter/slider/#/minvalue]
type = long
check/type = long
default = 0
description = "minimum value of the argument"

[menu/parameter/slider/#/maxvalue]
type = long
check/type = long
default = 1000
description = "maximum value of the argument"

[menu/parameter/slider/#/stepsize]
type = long
check/type = long
default = 1
description = "step size used"

[menu/parameter/slider/#/mintext]
type = string
check/type = string
default = ""
description = "Text at minimal value"

[menu/parameter/slider/#/maxtext]
type = string
check/type = string
default = ""
description = "Text at maximal value"

[menu/parameter/checkbox/#]
type = struct
check/type = any
default = ""
gen/struct/type = CheckboxParameter
gen/struct/alloc = 1
gen/struct/create = 0

[menu/parameter/checkbox/#/type]
type = discriminator
check/type = enum
check/enum = #5
check/enum/#0 = slider
check/enum/#1 = checkbox
check/enum/#2 = numeric
check/enum/#3 = ring
check/enum/#4 = alpha
check/enum/#5 = ip
default = checkbox ; TODO (elektra): should be constant
gen/enum/type = CommandParameterType
gen/enum/create = 0

[menu/parameter/checkbox/#/displayname]
type = string
check/type = string
default = ""
description = "name to display in the command"

[menu/parameter/checkbox/#/envname]
type = string
check/type = string
require =
description = "name of the environment variable used by the parameter"

[menu/parameter/checkbox/#/value]
type = enum
check/type = enum
check/enum = #2
check/enum/#0 = off
check/enum/#1 = on
check/enum/#2 = gray
default = off
description = "initial value of the argument"
gen/enum/type = CheckboxState
gen/enum/create = 0

[menu/parameter/checkbox/#/allowgray]
type = boolean
check/type = boolean
default = 0 ; TODO (elektra): default values conversion
description = whether to allow the third (gray) state

[menu/parameter/checkbox/#/offtext]
type = string
check/type = string
description = text to display when in off state
default = "" ; TODO: has very weird behaviour

[menu/parameter/checkbox/#/ontext]
type = string
check/type = string
description = text to display when in on state
default = "" ; TODO: has very weird behaviour

[menu/parameter/checkbox/#/graytext]
type = string
check/type = string
description = text to display when in gray state
default = "" ; TODO: has very weird behaviour

[menu/parameter/numeric/#]
type = struct
check/type = any
default = ""
gen/struct/type = NumericParameter
gen/struct/alloc = 1
gen/struct/create = 0

[menu/parameter/numeric/#/type]
type = discriminator
check/type = enum
check/enum = #5
check/enum/#0 = slider
check/enum/#1 = checkbox
check/enum/#2 = numeric
check/enum/#3 = ring
check/enum/#4 = alpha
check/enum/#5 = ip
default = numeric ; TODO (elektra): should be constant
gen/enum/type = CommandParameterType
gen/enum/create = 0

[menu/parameter/numeric/#/displayname]
type = string
check/type = string
default = ""
description = "name to display in the command"

[menu/parameter/numeric/#/envname]
type = string
check/type = string
require =
description = "name of the environment variable used by the parameter"

[menu/parameter/numeric/#/value]
type = long
check/type = long
default = 0
description = "initial value of the argument"

[menu/parameter/numeric/#/minvalue]
type = long
check/type = long
default = 0
description = "minimum value of the argument"

[menu/parameter/numeric/#/maxvalue]
type = long
check/type = long
default = 1000
description = "maximum value of the argument"

[menu/parameter/ring/#]
type = struct
check/type = any
default = ""
gen/struct/type = RingParameter
gen/struct/alloc = 1
gen/struct/create = 0

[menu/parameter/ring/#/type]
type = discriminator
check/type = enum
check/enum = #5
check/enum/#0 = slider
check/enum/#1 = checkbox
check/enum/#2 = numeric
check/enum/#3 = ring
check/enum/#4 = alpha
check/enum/#5 = ip
default = ring ; TODO (elektra): should be constant
gen/enum/type = CommandParameterType
gen/enum/create = 0

[menu/parameter/ring/#/displayname]
type = string
check/type = string
default = ""
description = "name to display in the command"

[menu/parameter/ring/#/envname]
type = string
check/type = string
require = 
description = "name of the environment variable used by the parameter"

[menu/parameter/ring/#/value]
type = long
check/type = long
default = 0
description = "initial value of the argument"

[menu/parameter/ring/#/strings/#]
type = string
check/type = string
description = "list of alternative strings to choose from"
require =
gen/struct/array/sizefield = stringsCount

[menu/parameter/alpha/#]
type = struct
check/type = any
default = ""
gen/struct/type = AlphaParameter
gen/struct/alloc = 1
gen/struct/create = 0

[menu/parameter/alpha/#/type]
type = discriminator
check/type = enum
check/enum = #5
check/enum/#0 = slider
check/enum/#1 = checkbox
check/enum/#2 = numeric
check/enum/#3 = ring
check/enum/#4 = alpha
check/enum/#5 = ip
default = alpha ; TODO (elektra): should be constant
gen/enum/type = CommandParameterType
gen/enum/create = 0

[menu/parameter/alpha/#/displayname]
type = string
check/type = string
default = ""
description = "name to display in the command"

[menu/parameter/alpha/#/envname]
type = string
check/type = string
require =
description = "name of the environment variable used by the parameter"

[menu/parameter/alpha/#/value]
type = string
check/type = string
default = ""
description = "initial value of the argument"
gen/struct/field = initialValue

[menu/parameter/alpha/#/allowedchars]
type = string
check/type = string
default = ABCDEFGHIJKLMNOPQRSTUVWXYZ
description = "range of characters allowed"

[menu/parameter/alpha/#/minlength]
type = long
check/type = long
default = 0
description = "minimum length of the argument"

[menu/parameter/alpha/#/maxlength]
type = long
check/type = long
default = 100
description = "maximum length of the argument"

[menu/parameter/ip/#]
type = struct
check/type = any
default = ""
gen/struct/type = IpParameter
gen/struct/alloc = 1
gen/struct/create = 0

[menu/parameter/ip/#/type]
type = discriminator
check/type = enum
check/enum = #5
check/enum/#0 = slider
check/enum/#1 = checkbox
check/enum/#2 = numeric
check/enum/#3 = ring
check/enum/#4 = alpha
check/enum/#5 = ip
default = ip ; TODO (elektra): should be constant
gen/enum/type = CommandParameterType
gen/enum/create = 0

[menu/parameter/ip/#/displayname]
type = string
check/type = string
default = ""
description = "name to display in the command"

[menu/parameter/ip/#/envname]
type = string
check/type = string
require =
description = "name of the environment variable used by the parameter"

[menu/parameter/ip/#/value]
type = string
check/type = string
default = ""
description = "initial value of the argument"
gen/struct/field = initialValue

[menu/parameter/ip/#/v6]
type = boolean
check/type = boolean
default = 0 ; TODO (elektra): default values conversion
description = "whether or not to use IPv6"